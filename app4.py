import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(page_title="Recherche optimale de mod√®le financier", layout="wide")
st.title("Optimisation de la gestion budg√©taire par simulation multi-sc√©narios")

# --- Param√®tres de simulation ---
mois_max = st.sidebar.slider("Dur√©e simulation (mois)", 6, 24, 12)
nb_scenarios = st.sidebar.slider("Nombre de sc√©narios √† g√©n√©rer", 10, 200, 100)

postes = ['Loyer', 'Alimentation', 'Transport', 'Divertissement', '√âpargne', 'Assurances', 'Sant√©', 'Autres']

st.sidebar.header("Budget mensuel de base par poste")
base_montants = {}
for poste in postes:
    base_montants[poste] = st.sidebar.number_input(poste, min_value=0, value=100, step=10)

st.sidebar.header("Plages de variation en % autour du budget de base")
variations = {}
for poste in postes:
    pct = st.sidebar.slider(f"Variation % {poste}", 0, 50, 20)
    variations[poste] = pct / 100  # ex: 0.2 = ¬±20%

# Crit√®res filtrage
max_depense_moyenne = st.sidebar.number_input("D√©pense max moyenne par mois (‚Ç¨)", min_value=0, value=2500, step=100)

# Fonction pour g√©n√©rer un sc√©nario selon variations autour du base
def generer_scenario(base, var_pct, mois):
    """
    G√©n√®re un dataframe [mois x postes] avec montants variables dans plages ¬±var_pct
    """
    df = pd.DataFrame(index=range(1, mois+1), columns=base.keys())
    for poste, val in base.items():
        low = val * (1 - var_pct[poste])
        high = val * (1 + var_pct[poste])
        # Pour chaque mois, tirage uniforme dans [low, high]
        df[poste] = np.random.uniform(low, high, size=mois)
    return df

# G√©n√©rer tous les sc√©narios
scenarios = []
for i in range(nb_scenarios):
    df_s = generer_scenario(base_montants, variations, mois_max)
    # Assurer que l'√©pargne n'est pas n√©gative
    df_s['√âpargne'] = df_s['√âpargne'].clip(lower=0)

    # Calcul d√©penses totales = somme postes sauf √©pargne
    df_s['D√©penses totales'] = df_s.drop(columns=['√âpargne']).sum(axis=1)
    # Total mensuel = d√©penses + √©pargne
    df_s['Total mensuel'] = df_s[postes].sum(axis=1)
    # √âpargne cumul√©e dans le temps
    df_s['√âpargne cumul√©e'] = df_s['√âpargne'].cumsum()

    # Calcul m√©triques cl√©s
    dep_moy = df_s['D√©penses totales'].mean()
    epargne_finale = df_s['√âpargne cumul√©e'].iloc[-1]
    epargne_rapide = df_s['√âpargne cumul√©e'].iloc[mois_max//3] if mois_max>=3 else epargne_finale

    scenarios.append({
        'index': i,
        'df': df_s,
        'depense_moyenne': dep_moy,
        'epargne_finale': epargne_finale,
        'epargne_rapide': epargne_rapide
    })

# Filtrer sc√©narios selon crit√®re d√©penses max
scenarios_filtres = [sc for sc in scenarios if sc['depense_moyenne'] <= max_depense_moyenne]

# Trier par √©pargne finale d√©croissante
top_par_final = sorted(scenarios_filtres, key=lambda x: x['epargne_finale'], reverse=True)[:3]

# Trier par √©pargne rapide d√©croissante
top_par_rapide = sorted(scenarios_filtres, key=lambda x: x['epargne_rapide'], reverse=True)[:3]

# Affichage r√©sultats
st.subheader("Top 3 sc√©narios par √©pargne finale maximale")
for i, scen in enumerate(top_par_final, 1):
    st.markdown(f"### Sc√©nario #{scen['index']}")
    st.write(f"D√©pense moyenne mensuelle : {scen['depense_moyenne']:.2f} ‚Ç¨")
    st.write(f"√âpargne finale : {scen['epargne_finale']:.2f} ‚Ç¨")
    st.line_chart(scen['df'][postes + ['D√©penses totales', '√âpargne cumul√©e']])
    st.dataframe(scen['df'][postes].mean().to_frame(name='Montant moyen (‚Ç¨)').sort_values(by='Montant moyen (‚Ç¨)', ascending=False))

st.markdown("---")

st.subheader("Top 3 sc√©narios par √©pargne rapide (1/3 de la p√©riode)")
for i, scen in enumerate(top_par_rapide, 1):
    st.markdown(f"### Sc√©nario #{scen['index']}")
    st.write(f"D√©pense moyenne mensuelle : {scen['depense_moyenne']:.2f} ‚Ç¨")
    st.write(f"√âpargne apr√®s 1/3 p√©riode : {scen['epargne_rapide']:.2f} ‚Ç¨")
    st.line_chart(scen['df'][postes + ['D√©penses totales', '√âpargne cumul√©e']])
    st.dataframe(scen['df'][postes].mean().to_frame(name='Montant moyen (‚Ç¨)').sort_values(by='Montant moyen (‚Ç¨)', ascending=False))

st.markdown("""
---
üí° **Explications** :  
- Chaque sc√©nario teste une combinaison de budgets mensuels variables dans les plages d√©finies (%).  
- On calcule plusieurs m√©triques pour juger de la qualit√© du mod√®le financier : √©pargne totale finale, vitesse d‚Äô√©pargne, d√©penses moyennes.  
- Tu peux ajuster la dur√©e, le nombre de sc√©narios, la base budg√©taire et les plages de variations pour explorer diff√©rents profils.  
""")
